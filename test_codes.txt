//------------ event queue testing , comment the following event lines ------------

/*
    event x(0,0.5) , y(1,0.1), z(2,1.5);

    priority_queue<event> pq ;

    pq.push(x);  pq.push(y); pq.push(z);

    while(!pq.empty()){

        event cur = pq.top();
        pq.pop();

        cout << cur.time << endl;


    }
*/
// ----- end of event queue test ------------------ 














//*------------- broadcasting test ----- //

    double clock = 0 ;

    Block B(-1,4);
    Block B2(-1,8);
    priority_queue<event> pq ;

    event first(B,-1,4,clock),ev2(B2,-1,8,clock+60);
    pq.push(first);
    pq.push(ev2);

    while(clock < 100 && !pq.empty()){
       // cout << "clock : " << clock << endl;
        event cur  = pq.top();
        pq.pop();
        

        network[cur.receiver_id].event_handler(pq,cur,clock);
        clock = cur.time ;


    }
    int display = 0;
    unordered_set<uint32_t> :: iterator itr;
    while(true){
        cout << "enter next peer : " ;
        cin >> display ;

        if(display < 0) break ;
        cout << "recvd blocks of " << display <<" :" ; 

        for(itr = network[display].received_blocks.begin();itr != network[display].received_blocks.end();itr++){
            cout << (*itr) << " ";
        }


        cout << endl;

    }


//*---------------------end of broad casting test ----------/